/**
 * SAMP CEF Adapter for Lviv RP HUD
 * This file provides the server-side implementation for the CEF integration
 * Compatible with popular CEF plugins: CEFOF, SAMP-CEF, SAMPSON
 */

// Include proper plugin header based on your CEF plugin
// #include <cef> // For CEFOF
// #include <sampson> // For SAMPSON
// #include <samp-cef> // For SAMP-CEF

// Constants
#define BROWSER_NAME_HUD "lviv_rp_hud"
#define HUD_URL "https://your-hud-url.vercel.app" // Replace with your actual URL

// Hook for when a player connects
public OnPlayerConnect(playerid)
{
    // Create the HUD browser for the player
    CreateHudBrowser(playerid);
    return 1;
}

// Create the HUD browser with proper settings for different CEF plugins
CreateHudBrowser(playerid)
{
    // CEFOF implementation
    #if defined _INC_CEFOF
        cef_create_browser(playerid, BROWSER_NAME_HUD, HUD_URL, false, true);
        cef_set_audio_settings(playerid, BROWSER_NAME_HUD, false, 0.0); // No audio needed for HUD
    
    // SAMPSON implementation
    #elseif defined _INC_SAMPSON
        sampson_create_browser(playerid, BROWSER_NAME_HUD, HUD_URL, 0, 0, 1920, 1080, true, true);
        
    // SAMP-CEF implementation
    #elseif defined _INC_SAMP_CEF
        cef_create(playerid, BROWSER_NAME_HUD, HUD_URL, 0, 0, 1920, 1080, true);
    
    // Generic fallback (adjust for your plugin)
    #else
        // Replace with your CEF plugin's specific browser creation function
        CreateBrowser(playerid, BROWSER_NAME_HUD, HUD_URL, 0, 0, 1920, 1080, true);
    #endif
    
    // Initialize player data after a short delay to ensure browser is loaded
    SetTimerEx("SendInitialPlayerData", 1000, false, "i", playerid);
    return 1;
}

// Send initial player data to the HUD
public SendInitialPlayerData(playerid)
{
    // Get player data
    new Float:health, Float:armor;
    new money, hunger, wanted;
    new playerName[MAX_PLAYER_NAME];
    
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armor);
    money = GetPlayerMoney(playerid);
    hunger = GetPlayerHunger(playerid); // Your custom function for hunger
    wanted = GetPlayerWantedLevel(playerid);
    GetPlayerName(playerid, playerName, sizeof(playerName));
    
    // Format JSON data to send to browser
    new data[512];
    format(data, sizeof(data), 
        "{\"type\":\"playerUpdate\",\"payload\":{"
        "\"health\":%d,"
        "\"armor\":%d,"
        "\"money\":%d,"
        "\"hunger\":%d,"
        "\"wanted\":%d,"
        "\"playerId\":%d,"
        "\"onlinePlayers\":%d"
        "}}",
        floatround(health),
        floatround(armor),
        money,
        hunger,
        wanted,
        playerid,
        GetOnlinePlayers() // Your function to get online player count
    );
    
    // Send data to browser
    SendDataToBrowser(playerid, data);
    return 1;
}

// Generic function to send data to the browser
// Adapts to different CEF plugins
SendDataToBrowser(playerid, const data[])
{
    // CEFOF implementation
    #if defined _INC_CEFOF
        cef_emit_event(playerid, BROWSER_NAME_HUD, "window.postMessage", data, "*");
    
    // SAMPSON implementation
    #elseif defined _INC_SAMPSON
        sampson_eval(playerid, BROWSER_NAME_HUD, "window.postMessage('%s', '*');", data);
    
    // SAMP-CEF implementation
    #elseif defined _INC_SAMP_CEF
        cef_emitjs(playerid, BROWSER_NAME_HUD, "window.postMessage('%s', '*');", data);
    
    // Generic fallback (adjust for your plugin)
    #else
        // Replace with your CEF plugin's specific JavaScript evaluation function
        ExecuteBrowserJS(playerid, BROWSER_NAME_HUD, "window.postMessage('%s', '*');", data);
    #endif
    
    return 1;
}

// Update player stats based on game events
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    // Get updated health
    new Float:health;
    GetPlayerHealth(playerid, health);
    
    // Send to HUD
    new data[128];
    format(data, sizeof(data), "{\"type\":\"playerUpdate\",\"payload\":{\"health\":%d}}", floatround(health));
    SendDataToBrowser(playerid, data);
    
    return 1;
}

public OnPlayerMoneyChange(playerid, oldmoney, newmoney)
{
    // Send to HUD
    new data[128];
    format(data, sizeof(data), "{\"type\":\"playerUpdate\",\"payload\":{\"money\":%d}}", newmoney);
    SendDataToBrowser(playerid, data);
    
    return 1;
}

// Send a notification to the player's HUD
SendHudNotification(playerid, const message[], const type[] = "info")
{
    new data[512];
    format(data, sizeof(data), 
        "{\"type\":\"notification\","
        "\"message\":\"%s\","
        "\"notificationType\":\"%s\"}",
        message,
        type
    );
    
    SendDataToBrowser(playerid, data);
    return 1;
}

// Custom function to update hunger (example)
public UpdatePlayerHunger(playerid, amount)
{
    new data[128];
    format(data, sizeof(data), "{\"type\":\"playerUpdate\",\"payload\":{\"hunger\":%d}}", amount);
    SendDataToBrowser(playerid, data);
    
    return 1;
}

